#!/usr/bin/env python3
from xml.etree import ElementTree
import pprint
import sys
import csv

action = { "WindowsLogin": """action WinLogon {
    $log_plugin = "mswin-security"
    field["event_id"] = "4624"

    exec Controller
}

""",
           "CheckEmails": """action CheckEmails {
    $log_plugin = "mswin-o365"
    field["event_id"] = "exchange"

    exec Controller
}

""",
           "WindowsLogout": """action WinLogout {
    $log_plugin = "mswin-security"
    field["event_id"] = "4634"

    exec Controller

}""",
}

action_step = 0

def print_WebBrowsing(node, action_step, children_len):
    len_first_grandchild = len(node[0]) # Grandchild must have the exact same number

    csvheader = []
    csvdict = {}
    for field in node:
        fieldname = field.attrib["TEXT"]
        csvheader.append(fieldname)
        for item in field:
            try:
                csvdict[fieldname].append(item.attrib["TEXT"])
            except KeyError:
                csvdict[fieldname] = []
                csvdict[fieldname].append(item.attrib["TEXT"])

    # print(str(csvdict))    
    csv_len = len(csvdict[csvheader[0]])
    csvfile = open("A%d.csv" % action_step, "w")
    writer = csv.DictWriter(csvfile, fieldnames=csvheader)
    writer.writeheader()
    item = 0
    while item < csv_len:
        csvrow = {}
        for h in csvheader:
            csvrow[h] = csvdict[fieldname][item]
        item += 1
        writer.writerow(csvrow)
    csvfile.close()
    
    print("repeat %d as $index {" % len_first_grandchild)
    print("\t$domain = csv(file.amidir(\"A%d.csv\"), $index, field=\"domain\", true)" % (action_step))
    print("\taction A%d_dns {" % action_step)
    print("\t\texec DNSConnection")
    print("\t}")
    print("\taction A%d_http {" % action_step)
    print("\t\texec HTTPConnection")
    print("\t}")
    print("}\n")

def run_repeat(node, action_type, action_step, children_len):
    if action_type == "WebBrowsing":
        print_WebBrowsing(node, action_step, children_len)
        
def read_levels(node, level=0):
    for n in node:
        yield n, n.attrib, level, len(n)
        if len(n) > 0:
                level += 1
                yield from read_levels(n, level)
                level -= 1                
                
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Syntax: %s freemind-file.mm" % sys.argv[0])
        sys.exit(1)
    
    freemind_file = sys.argv[1]

    print("av 1\n# Generated by Freemind2AMI\n")
    
    document = ElementTree.parse(freemind_file)
    root = document.getroot()

    for node, attr, level, clen in read_levels(root):
        action_step += 1
        if level == 1 and clen == 0:
            print(action[attr["TEXT"]])
        else:
            run_repeat(node, attr["TEXT"], action_step, clen)

            
